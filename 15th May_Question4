Questions:4
===============
"Question: given a string such as ""aabbbbbcc"" print the longest occurring character,index and number of times like ""longest occurring character is b and length is 5 at index 2"".
 Points to note : 
1. Consider empty string input.
2. Consider null string input.
3. There may be input like 110001100 so consider repetition of character.
4. I was asked to write the logic in a method and much of the method call and Junit test cases were already provided. Although I had to add some test cases of my own for testing. 
"

Answer:
public class LongestOccuringCharacter {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String string1 = "aabbabacbccccddd";  
	       int count;
	       int count2=0;
	       int k=0;
	         
	       //Converts given string into character array  
	       char string[] = string1.toCharArray();  
	         
	       System.out.println("Duplicate characters in a given string: ");  
	       //Counts each character present in the string  
	       for(int i = 0; i <string.length; i++) {  
	           count = 1;
	           int j=0; 
	           for(j = i+1; j <string.length; j++) {  
	               if(string[i] == string[j] && string[i] != ' ') {
	            	  // System.out.println("string[i]"+string[i]);
	                   count++; 
	                  
	                   //Set string[j] to 0 to avoid printing visited character  
	                   string[j] = '0';  
	               }  
	           }  
	           //A character is considered as duplicate if count is greater than 1  
	           int temp=0;
	           if(count > 1 && string[i] != '0') {
	        	   
	        	   temp=count;
	        	   
	        	   System.out.println("char "+string[i]+"--> count:"+count+" at index:"+i);
	        	   if(temp>count2) {
	        		   count2=count;
	        		   k=i;
	        		   
	        		//   System.out.println("char "+string[i]+"--> count is greater here:"+count+" at index:"+i);
	        		 //  System.out.println("This is the highest repeated character");
	        	   }
	           }
	           else if(count==1 && string[i] != '0') {
	        	//   System.out.println("char "+string[i]+"--> count is greater here:"+count+" at index:"+i);
	           if(temp>count2) {
	        	   count2=count;
        		 //  System.out.println("This is the highest repeted character");
        	   }
	           }
	       }
	       System.out.println("this is the highest count :"+count2);
	       System.out.println("char "+string[k]+"--> count is greater:"+count2+" at index:"+k);
		
		
		
		
		

	}

}
Solution2:
public class LongestUniformSubstring {
	
	public static void main (String[] args){
		//String input = "abcc";
		String input = "110001100";
		//String input = "caaakkkkkkkbbkkkkk";
		char[] inputChars = input.toCharArray();
		
		if(input == null || input.length()==0){
			System.out.println("Input is Empty");
		}
		
		input = input.toLowerCase();
		
		int size=1;
		int maxSize=0;
		int finalIndex=0;
		
		char prevChar = inputChars[0];
		
		for(int i=1; i<inputChars.length; i++){
			char currChar = inputChars[i];
			
/*			if(currChar <=97 || currChar>=122){
				System.out.println("Invalid input");
				break;
			}
*/			if(currChar == prevChar) {
				size++;
			} 
			else {
				//If diff char, check for size and ressign
				if(maxSize < size){
					
					maxSize = size;
					finalIndex = i-size;
				}
				size =1;
			}
			//before moving to next loop reassign the prev char
			prevChar =  currChar;
		}

		if(maxSize<size)
        {
            maxSize=size;
            finalIndex=inputChars.length-size;
        }
		//Result
		System.out.println("Max size-"+maxSize);
		System.out.println("Starting index-"+finalIndex);
	}

}
